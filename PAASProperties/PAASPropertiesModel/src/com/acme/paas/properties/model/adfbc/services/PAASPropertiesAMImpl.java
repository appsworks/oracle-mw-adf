package com.acme.paas.properties.model.adfbc.services;

import com.acme.paas.common.model.adfbc.services.PAASCommonAMImpl;
import com.acme.paas.common.model.adfbc.views.XxcusLookupValuesVOImpl;
import com.acme.paas.fwk.ApplicationModuleImpl;
import com.acme.paas.fwk.ViewObjectImpl;
import com.acme.paas.properties.model.adfbc.services.common.PAASPropertiesAM;
import com.acme.paas.properties.model.adfbc.views.PersonPropertyDefPVOImpl;
import com.acme.paas.properties.model.adfbc.views.PersonPropertyDefPVORowImpl;
import com.acme.paas.properties.model.adfbc.views.XxcusPersonPropertiesEOVOImpl;
import com.acme.paas.properties.model.adfbc.views.XxcusPersonPropertiesEOVORowImpl;
import com.acme.paas.properties.model.adfbc.views.XxcusPersonPropertiesVOImpl;

import java.util.ArrayList;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 04 15:53:03 BST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PAASPropertiesAMImpl extends PAASCommonAMImpl implements PAASPropertiesAM {
    /**
     * This is the default constructor (do not remove).
     */
    public PAASPropertiesAMImpl() {
    }

    /**
     * Container's getter for XxcusPersonPropertiesEOVO1.
     * @return XxcusPersonPropertiesEOVO1
     */
    public com.acme.paas.fwk.ViewObjectImpl getXxcusPersonPropertiesEOVO1() {
        return (com.acme.paas.fwk.ViewObjectImpl)findViewObject("XxcusPersonPropertiesEOVO1");
    }

    /**
     * Container's getter for XxcusPersonPropertiesVO1.
     * @return XxcusPersonPropertiesVO1
     */
    public com.acme.paas.fwk.ViewObjectImpl getXxcusPersonPropertiesVO1() {
        return (com.acme.paas.fwk.ViewObjectImpl)findViewObject("XxcusPersonPropertiesVO1");
    }

    /**
     * Container's getter for XxcusLookupValuesVO1.
     * @return XxcusLookupValuesVO1
     */
    public XxcusLookupValuesVOImpl getXxcusLookupValuesVO1() {
        return (XxcusLookupValuesVOImpl)findViewObject("XxcusLookupValuesVO1");
    }

    /**
     * Container's getter for PersonPropertyDefPVO1.
     * @return PersonPropertyDefPVO1
     */
    public PersonPropertyDefPVOImpl getPersonPropertyDefPVO1() {
        return (PersonPropertyDefPVOImpl)findViewObject("PersonPropertyDefPVO1");
    }
    
    // ++ Private methods from here
    
    /*
     * Fetches current row of PVO or creates one if no row exists. The PVO
     * (Properties View Object)is a passivated transient and used to store
     * information on the current state of an instance.  Attributes are used
     * both by the business service layer and the view layer for display
     * purposes.
     */
    private PersonPropertyDefPVORowImpl getPVO() {

        oracle.jbo.server.ViewObjectImpl pVO = getPersonPropertyDefPVO1();

        if (pVO.getFetchedRowCount() > 0) {
            return (PersonPropertyDefPVORowImpl)pVO.getCurrentRow();
        }

        pVO.setMaxFetchSize(0);
        PersonPropertyDefPVORowImpl pvoRow = (PersonPropertyDefPVORowImpl)pVO.createRow();

        pvoRow.setPvoId(new Number(1));

        pVO.insertRow(pvoRow);
        pVO.setCurrentRow(pvoRow);
        return pvoRow;

    } 
    /**
     * Initialises business services for a new transaction
     */
    public void initialiseCreate() {

        // Create a new Cascade structure
        Number propertyId = createProperty();

        PersonPropertyDefPVORowImpl pvo = getPVO();

    } 
    
    /*
     * Creates a new Cascade Structure
     */
    private Number createProperty() {

        oracle.jbo.server.ViewObjectImpl propertiesVO = getXxcusPersonPropertiesEOVO1();

        if (!propertiesVO.isExecuted()) {
            propertiesVO.setMaxFetchSize(0);
            propertiesVO.executeQuery();
        }

        XxcusPersonPropertiesEOVORowImpl property = (XxcusPersonPropertiesEOVORowImpl)propertiesVO.createRow();
        setPreopertyDefaultAttrs(property);
        propertiesVO.insertRow(property);
        propertiesVO.setCurrentRow(property);
        property.setNewRowState(Row.STATUS_INITIALIZED);
       
        
        return new Number(Integer.parseInt(property.getPersonPropertyId().toString()));

    }   
    
    /*
     * Sets default values for a cascade structure
     */
    private void setPreopertyDefaultAttrs(XxcusPersonPropertiesEOVORowImpl property) {

        property.setObjectVersionNumber(new Number(1));
        property.setLastUpdateLogin(new Number(-1));
    }
    
    /**
     * Initialises business services for an existing Cascade structure
     */
    public void initialiseEdit(ArrayList structList) {

        // Reset the state otherwise if handed the previous AM instance
        // state will be preserved and VO's will already be executed
        resetState(true);

        if (structList == null) {
            throw new JboException("Cascade structure list is null");
        }

        Number structId = null;
        StringBuilder structIdList = new StringBuilder("PERSON_PROPERTY_ID IN (");
        for (int i = 0; i < structList.size(); i++) {

            if(i > 0){
                structIdList.append(", ");
            }

            structId = (Number)structList.get(i);
            structIdList.append(structId.toString());

        }
        structIdList.append(")");

        PersonPropertyDefPVORowImpl pvo = getPVO();

        oracle.jbo.server.ViewObjectImpl structVO = getXxcusPersonPropertiesEOVO1();
        structVO.setWhereClause(structIdList.toString());
        structVO.executeQuery();

    
    } 
    
    public Boolean isTransactionDirty() {

        if (getDBTransaction().isDirty()) {
            return Boolean.TRUE;
        }

        return Boolean.FALSE;
    }
    
    /**
     * Prepares the business service components for saving and commits changes
     * @param clearCache Sets the transaction to clear the cache on commit if true
     */
    public void saveTransaction(Boolean clearCache) {

        getDBTransaction().commit();

    }      
}
